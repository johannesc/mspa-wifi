substitutions:
  device_name: mspa
  device_password: !secret mspa_password
  device_api_key: !secret mspa_api_key

esphome:
  name: ${device_name}

esp32:
  board: lolin_s2_mini
  variant: esp32s2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "esp-${device_name}"
    password: "${device_password}"

captive_portal:

# Enable logging
logger:
  level: INFO  # Set to DEBUG if you are having issues!
  #baud_rate: 0 # disable logging over uart

api:
  encryption:
    key: "${device_api_key}"

ota:
  platform: esphome
  password: "${device_password}"

web_server:
  port: 80
  ota: false
#  auth:
#    username: admin
#    password: "${device_password}"

external_components:
  - source: components
    components: [ mspa_wifi ]

uart:
  - id: uart_box_to_remote
    rx_pin: # green cable to box
      number: GPIO33
      inverted: false
    tx_pin: # green cable to remote
      number: GPIO39
      inverted: false
    baud_rate: 9600
    rx_buffer_size: 512
  - id: uart_remote_to_box
    rx_pin: # black cable to remote
      number: GPIO37
      inverted: false
    tx_pin: # black cable to box
      number: GPIO18
      inverted: false
    baud_rate: 9600
    rx_buffer_size: 512

mspa_wifi:
  - id: mspa_wifi_1
    uart_box_to_remote_id: uart_box_to_remote
    uart_remote_to_box_id: uart_remote_to_box

binary_sensor:
  - platform: mspa_wifi
    flow_in:
      name: "Flow In"
    flow_out:
      name: "Flow Out"

switch:
  - platform: mspa_wifi
    filter_pump:
      name: "Filter Pump"
    uvc:
      name: "UVC"
    ozone:
      name: "Ozone"
    heater:
      name: "Heater"

sensor:
  - platform: mspa_wifi
    water_temperature:
      name: "Temperature"
  - platform: mspa_wifi
    target_water_temperature:
      name: "Target Temperature"
      on_value:
      - lambda: |-
          id(target_water_temp).publish_state(x);
  - platform: mspa_wifi
    bubble_speed:
      name: "Bubble Speed"
      on_value:
      - lambda: |-
          id(target_bubble_speed).publish_state(x);
number:
  - platform: template
    name: "Target water temp"
    id: target_water_temp
    min_value: 24
    max_value: 40
    step: 1
    icon: "mdi:thermometer"
    optimistic: true
    restore_value: false
    set_action:
      - lambda: |-
          ESP_LOGI("number_template", "New value from HA: %f", x);
          id(mspa_wifi_1)->set_target_water_temperature(x);
  - platform: template
    name: "Bubble Speed"
    id: target_bubble_speed
    min_value: 0
    max_value: 3
    step: 1
    optimistic: false
    restore_value: false
    set_action:
      - lambda: |-
          ESP_LOGI("bubble speed template", "New value from HA: %f", x);
          id(mspa_wifi_1)->set_bubble_speed((uint8_t)x);
